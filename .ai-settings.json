{
  "project": {
    "name": "CarMarket App",
    "type": "Vue.js",
    "version": "3.x",
    "ui": "PrimeVue 4.x"
  },
  "components": {
    "naming": {
      "files": "PascalCase.vue",
      "components": "PascalCase",
      "props": "camelCase",
      "events": "camelCase"
    },
    "structure": {
      "template": "first",
      "script": "second",
      "style": "last"
    },
    "requirements": {
      "props": {
        "type": "required",
        "validation": "required",
        "default": "if needed",
        "description": "required"
      },
      "documentation": {
        "usage": "required",
        "props": "required",
        "events": "if exists",
        "slots": "if exists"
      },
      "primevue": {
        "baseComponent": "required",
        "description": "Перед створенням нового компонента обов'язково вказати, на базі яких PrimeVue компонентів він буде створений",
        "approval": "required",
        "styling": "use only PrimeVue classes and utilities"
      }
    }
  },
  "styling": {
    "primary": "PrimeVue",
    "utilities": "PrimeFlex v4",
    "customCSS": "only if absolutely necessary",
    "themes": {
      "light": "Lara Light",
      "dark": "Lara Dark"
    },
    "rules": {
      "forbidden": {
        "custom_css": "Заборонено використання кастомних CSS/Stylus/Sass стилів",
        "inline_styles": "Заборонено використання інлайн-стилів style=\"...\"",
        "external_libraries": "Заборонено використання сторонніх бібліотек стилів",
        "non_prefixed_vars": "Заборонено використання CSS змінних без префіксу --p-"
      },
      "required": {
        "primevue": "Використовувати тільки офіційні компоненти PrimeVue 4",
        "primeflex": "Використовувати тільки утиліти PrimeFlex v4",
        "passthrough": "Використовувати :pt проп для кастомізації компонентів",
        "responsive": "Використовувати адаптивні класи (col-12 md:col-6)",
        "themes": "Використовувати стандартні теми Lara",
        "css_vars": "Використовувати CSS змінні з префіксом --p- (--p-surface-card, --p-text-color і т.д.)"
      }
    },
    "guidelines": {
      "positioning": "Використовувати flex, grid, absolute/relative з PrimeFlex",
      "colors": "Використовувати semantic кольори теми (primary, surface-500)",
      "animations": "Використовувати вбудовані класи (transition-all, hover:shadow-2)",
      "sizing": "Використовувати стандартну систему PrimeFlex (rem-шкала)"
    },
    "customization_order": [
      "Перевірити рішення в документації PrimeVue/PrimeFlex",
      "Використати :pt проп для кастомізації",
      "Тільки в крайньому випадку - мінімальний scoped CSS"
    ]
  },
  "conventions": {
    "imports": {
      "order": [
        "vue core",
        "vue router",
        "primevue components",
        "local components",
        "composables",
        "assets"
      ]
    },
    "comments": {
      "components": "required",
      "complex logic": "required",
      "props": "required",
      "base components": "required"
    }
  },
  "workflow": {
    "before_creation": {
      "1": "Визначити базові PrimeVue компоненти",
      "2": "Описати структуру та взаємодію компонентів",
      "3": "Отримати схвалення на створення",
      "4": "Дотримуватися стилів PrimeVue",
      "5": "префікс стилів з p-"
    }
  },
  "quality": {
    "testing": "optional",
    "typescript": "preferred",
    "eslint": "required",
    "prettier": "required"
  },
  "demoData": {
    "components": "Демо-дані мають бути локально у компоненті (const demoData = ...), як приклад.",
    "pages": "Для сторінок використовувати окремий файл mock/*.json.",
    "jsonSchema": "Для кожного mock-файлу додавати json-schema у вигляді коментаря для опису структури.",
    "apiStructure": "Дані мають точно відповідати майбутній API-структурі.",
    "validation": "У формах лише UI-валидація (required, maxlength).",
    "filters": "Фільтри — заглушки з @input/@change, emit('update:filters').",
    "apiMethods": "API-запити — пусті методи з коментарями // TODO: API call.",
    "router": "Маршрутизація — заглушки для useRouter, router.push('/mock').",
    "backendComments": "Обов'язково додавати коментарі для бекендера: над компонентом — очікувані пропси, над методами — опис ендпоінтів, біля emit — очікувані події.",
    "laravelNotes": "Для Laravel: позначати, де Blade, де Vue, додавати коментарі про X-CSRF-TOKEN, multipart/form-data, очікувані HTTP-коди помилок.",
    "forbidden": [
      "Не підключати реальні API",
      "Не імпортувати бібліотеки для HTTP-запитів",
      "Не реалізовувати авторизацію/сесії",
      "Не оптимізувати завантаження даних (prefetch, cache)"
    ],
    "testing": [
      "Всі props мають працювати з демо-даними",
      "emit події виводяться в консоль",
      "Адаптивність перевірена через DevTools"
    ]
  }
} 