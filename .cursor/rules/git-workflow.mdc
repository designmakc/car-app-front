---
description: 
globs: 
alwaysApply: false
---
# Правила роботи з Git

## Процес роботи

### 1. Створення гілки
```bash
# Отримання останніх змін
git pull origin main

# Створення нової гілки
git checkout -b feature/назва-фічі
```

### 2. Коміти
```bash
# Перегляд змін
git status
git diff

# Додавання змін
git add .

# Створення коміту
git commit -m "feat(ui): додано новий компонент

Детальний опис змін

Зміни:
- src/components/NewComponent.vue (1-50): створено компонент
- src/pages/Page.vue (100-120): інтеграція компонента"
```

### 3. Пуш
```bash
# Отримання останніх змін
git pull origin main

# Вирішення конфліктів (якщо є)
git merge main

# Пуш змін
git push origin feature/назва-фічі
```

## Правила іменування гілок

### Формат
```
<тип>/<назва>
```

### Типи гілок
- `feature/` - нова функціональність
- `fix/` - виправлення помилки
- `refactor/` - рефакторинг
- `docs/` - документація
- `style/` - стилі
- `test/` - тести

### Приклади
```
feature/car-filter
fix/price-calculation
refactor/form-validation
```

## Правила комітів

### Формат
```
<тип>(<область>): <опис>

<детальний опис>

<список змін>
```

### Типи
- `feat` - нова функціональність
- `fix` - виправлення помилки
- `docs` - документація
- `style` - стилі
- `refactor` - рефакторинг
- `test` - тести
- `chore` - зміни в конфігурації

### Області
- `ui` - інтерфейс
- `api` - API
- `auth` - авторизація
- `data` - дані
- `config` - конфігурація

### Приклади комітів
```
feat(ui): додано фільтр автомобілів

Додано компонент фільтрації з використанням PrimeVue

Зміни:
- src/components/CarFilter.vue (1-50): створено компонент
- src/pages/Catalog.vue (100-120): інтеграція фільтра
```

```
fix(api): виправлено помилку завантаження

Виправлено проблему з завантаженням даних

Зміни:
- src/composables/useCars.js (30-40): виправлено умову завантаження
```

## Чек-лист перед пушем
- [ ] Всі зміни закомічені
- [ ] Коміти відповідають формату
- [ ] Отримано останні зміни з main
- [ ] Вирішено конфлікти (якщо є)
- [ ] Код працює локально
- [ ] Перевірено на помилки

## Правила роботи з конфліктами

### 1. Отримання змін
```bash
git pull origin main
```

### 2. Вирішення конфліктів
- Відкрити файли з конфліктами
- Вирішити конфлікти вручну
- Зберегти зміни

### 3. Підтвердження вирішення
```bash
git add .
git commit -m "merge: вирішено конфлікти"
```

## Правила для Pull Request

### Назва PR
```
<тип>: <короткий опис>
```

### Опис PR
```
## Опис змін
Детальний опис внесених змін

## Зміни
- Файл1: що змінено
- Файл2: що змінено

## Чек-лист
- [ ] Код відповідає стандартам
- [ ] Додано тести
- [ ] Оновлено документацію
- [ ] Перевірено локально
```

## Заборонено
- Пуш в main без PR
- Коміти без опису
- Коміти з тимчасовим кодом
- Коміти з конфліктами
- Коміти з помилками

