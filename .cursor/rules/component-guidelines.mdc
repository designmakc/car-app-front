---
description: 
globs: 
alwaysApply: false
---
# Інструкції для створення компонентів

## Базові вимоги
1. Компонент повинен базуватися на офіційних PrimeVue 4 компонентах
2. Використовувати виключно PrimeFlex v3 для стилізації
3. Перед створенням надати опис базових компонентів
4. Отримати схвалення на створення
5. Додавати анотації до коду для початківця. Щоб було зрозуміло що робить ця частина коду

## Заборонено
- Кастомні CSS/Stylus/Sass стилі
- Інлайн-стилі (style="...")
- Сторонні бібліотеки стилів

## Обов'язково
- Використовувати :pt проп для кастомізації
- Застосовувати адаптивні класи PrimeFlex
- Використовувати теми Lara (light/dark)

## Структура компонента
1. Назва файлу та компонента в PascalCase
2. Порядок секцій:
   - template
   - script
   - style (тільки якщо абсолютно необхідно, scoped)

## Документація компонента
1. Опис призначення компонента
2. Список базових PrimeVue компонентів
3. Список пропсів з типами та описом
4. Приклади використання
5. Події (якщо є)
6. Слоти (якщо є)

## Стилізація
1. Використовувати класи PrimeVue
2. Використовувати утиліти PrimeFlex
3. Кастомні стилі тільки якщо абсолютно необхідно
4. Підтримка темної теми через систему тем PrimeVue

## Валідація пропсів
1. Обов'язково вказувати тип
2. Додавати валідацію значень
3. Встановлювати значення за замовчуванням
4. Документувати обмеження

## Приклад структури
```vue
<template>
  <!-- Компонент на базі PrimeVue: Card, Panel -->
  <div class="component-wrapper">
    <!-- Вміст компонента -->
  </div>
</template>

<script setup>
// Імпорти
import { ref, computed, onMounted } from 'vue';

// Пропси з валідацією
const props = defineProps({
  title: { type: String, required: true },
  items: { type: Array, default: () => [] }
});

// Емітовані події
const emit = defineEmits(['update', 'select']);

// Реактивні стани
const selectedItem = ref(null);

// Методи
const handleSelect = (item) => {
  selectedItem.value = item;
  emit('select', item);
  
  // TODO: API call - відправити вибір на сервер
  // Endpoint: POST /api/items/{item.id}/select
  // Response: { success: true, data: {...} }
};

/**
 * Коментар для бекендера
 * Очікуваний формат даних: { id: number, name: string, ... }
 * Endpoint: GET /api/items
 */
const fetchItems = () => {
  // TODO: API call
  console.log('Fetch items from API');
};

onMounted(() => {
  fetchItems();
});
</script>

<!-- Стилі тільки якщо абсолютно необхідно -->
<style scoped>
/* Використовувати в крайньому випадку */
</style>
```

## Процес створення
1. Опис базових PrimeVue компонентів
2. Отримання схвалення
3. Створення компонента
4. Перевірка відповідності стилям PrimeVue

## Чек-лист перед створенням
- [ ] Використані тільки PrimeVue 4 компоненти
- [ ] Стилізація через PrimeFlex v4
- [ ] Немає інлайн-стилів
- [ ] Використані адаптивні класи
- [ ] Застосований :pt проп де потрібно
- [ ] Підтримка тем Lara
- [ ] Мінімум або відсутність scoped CSS
- [ ] Визначені базові PrimeVue компоненти
- [ ] Всі пропси задокументовані
- [ ] Додана валідація пропсів
- [ ] Компонент відповідає дизайн системі
- [ ] Додані приклади використання

